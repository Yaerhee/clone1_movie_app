1. 영화 앱에서 API 사용하기 
-> App.js 파일 위에 axios import 후 componentDidMount() 함수에서 axios로 API 호출
-> componentDidMount() {
 axios.get('링크');
 }
-> 직접 열리지 않더라도 F12 -> Network로 확인하면 list_movies.json이 들어와있음(axios의 API 호출로 인해!)

2. axios는 네트워크를 사용하므로 느리다. JS에 axios.get() 포함한 함수 실행이 끝날때 까지 시간이 걸림을 알려주어야 함 -> async, await
 getMovies = async() => {
  const movies = await axios.get("링크");
-> async를 통해 JS에게 getMovies()함수가 시간이 필요하고, axios.get()의 실행을 기다려 달라고 알림

3. console.log(movies.data.data.movies); 로 객체에 있는 movies 키에 접근 가능함 (점 연산자로 접근)
-> 영화 데이터 알맹이만 들어있음.
=> 구조 분해 할당으로 더 스마트하게 구조 구현 가능
 getMovies = async () => {
  const {
   data: {
    data: { movies },
  },
} = await axios.get('https://yts-proxy.now.sh/list_movies.json');
 console.log(movies);

4. this.setState({ movies: movies })와 같이 작성할 경우 movies state에 영화 데이터 저장 가능.
(console.log를 삭제하고 대체함)
4-1. ES6에서는 객체의 키와 대입할 변수의 이름이 같을 경우 코드를 축약할 수 있음
 movies : movies -> movies
4-2. this.setState({ movies, isLoading: false });를 통해 false -> We are ready!로 출력하도록 구문 지정

5. Movie.js 생성 with prop-types
-> Movie.propTypes = { id: PropTypes.number.isRequired }; (일부 구문만 가져옴)
숫자형 자료를 통해서만 id를 출력할 수 있는 prop-types 지정
5-1. 위와 같이 id/year은 PropTypes.number.isRequired, title/summary/poster는 PropTypes.string.isRequired 지정

6. 아까 지정한 async() = 밑의 await axios.get 링크를 수정해보자
to 'yts-proxy.now.sh/list_movies.json?sort_by=rating', 물음표 이후의 링크를 통해 자동으로 별점순 sorting 가능

7. App 컴포넌트에서 Movie 컴포넌트 그리기
-> isLoading: false 부분과 연동되는 isLoading ? 'Loading...' : 옆 부분을 movies.map()함수로 지정
-> movies.map((movie) => {
 console.log(movie);
 return;
 })}

8. import Movie from './Movie'; 지정어를 통해 Movie 컴포넌트 import
하단의 movies.map 아랫부분에 return <movie />;로 수정하여 Movie 컴포넌트 출력 지정하기

9. Movie 컴포넌트에 props 지정하기
ex. return (
 <Movie
  id={movie.id}
  year={movie.year} ....

10. Console 탭에서 영화 데이터가 잘 배열되었는지 확인하고, id props 위에 key props 추가

11. Movie.css 파일 생성 후 Movie.js에는 import './Movie.css'; 적고,
Movie.css 파일에는 background-color: 지정하기

