1. App.js 속 로그 다 지우기.. 빠빠이 ㅠㅠ

2. 클래스형 컴포넌트 작성 - App 클래스가 리액트가 제공하는 Component 클래스를 반드시 상속받아야 한다는 사실은 명심! -> class App extends React.Component {....

3. 클래스형 컴포넌트에서는 JSX 반환에 render() 함수를 사용한다는 것을 잊지 말것
cf) 함수형 컴포넌트에는 return문, 클래스형 컴포넌트에서는 render()이며 내부에 return 등장

4. class 에서 number count가 필요할 때, 기본 숫자 출력은 ex)0,
class App extends React.Component {
 state = {
  count: 0,
 };
 render() {
  return <h1>The number is: {this.state.count}</h1>;
 }
}
-> 하지만 state에 동적인 데이터를 사용하고 있지 않음(0말고 들어있는 데이터가 없음.. 동작에 따라 변하는게 아님)

5. 동적인 class, state 구문 만들기
cf) 리액트는 state가 변경될 시 render() 함수를 재실행하고, 변경된 state를 화면에 출력함.
 state를 직접 변경하는 경우에는 render() 함수를 재실행하지 않음!
-> this.setState({ count: 1})
-> this.setState(current => ({
  count: current.count +1,
 })); -> 해당 구문을 통하여 유기적으로 덧셈, 뺄셈이 반영되는 결과물을 만들 수 있음
(setState() 함수 실행 시 바뀐 state 내용 반영을 위하여 리액트가 자동으로 화면을 업데이트함!)

6. constructor() 함수는 render() 함수보다 먼저 실행된다. but React.Component에 포함되는 함수가 아님(JS 함수).

7. componentDidMount(): 처음 실행 시
componentDidUpdated(): 업데이트 시
componentWillUnmount(): 컴포넌트가 죽을 때

8. isLoading state 설정
class App extends React.Component {
 state = {
  isLoading: true,
 };
 render() {
  const { isLoading } = this.state;
  return <div>{isLoading ? 'Loading...' : 'We are ready!'}</div>;
 }
}
.... 이렇게 하면 로딩 중일 때와 아닐 때(로딩 되었을 때)의 문구 설정 가능.

9. 로딩 현상 구현(setTimeout())
...
componentDidMount() {
 setTimeout(() => {
  this.setState({ isLoading: false });
 }, 6000);
}
 -> 첫 번째 인자로 전달한 함수를 두 번째 인자로 전달한 값(밀리초) 이후에 실행함.
 -> 6초 이후에 isLoading state를 false로 바꾸면서, We are ready! 문구를 출력할 수 있도록 설계한다는 말.

10. API 활용은 다음 시간에....
