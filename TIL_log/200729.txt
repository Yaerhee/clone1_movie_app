1. ㅋㅎㅋㅎㅎㅋㅎ
{
 name: 'Kimchi' [이 부분에 '콤마(,)' 하나 없어서 코드 다 뭉개졌구나... 다이나믹 코딩.... ^^....
 image: http://김치존맛탱.com/왜안김치요.jpg',
 },
정말 등잔밑이 시커멓구나

2. map 함수 연습 on console
 -> 배열의 모든 원소마다 특정 함수 적용, 함수가 반환한 결과를 모아서 배열로 반환
 -> 활용하여 특정 기호/글자가 추가된 배열을 결과값으로 만들 수 있음
 ex. {foodILike.map(dish => (<Food name={dish.name} />))}
 dish라는 이름은 임의로 지었고, map()을 통해 넘어온 이름들이 name props에 전달되어 값을 출력함

3. JSX 엘리먼트가 여러개일 때에는 감싸는 태그 없이 출력할 수 없음!
 ex. return 반환문에도 () (감싸는 괄호)가 추가되어야 하고
 내용 사이에 <div></div> 등과 같이 감싸는 태그 또한 포함되어야 함

4. renderFood() 함수 정의하는 법 익힘.
{foodILike.map(renderFood)}로 빼고
function renderFood(dish) {
 return <Food name={dish.name} picture={dish.image} />;
}
로 function을 따로 지정하면, 함수가 하나 추가되지만 renderFood 함수를 간단히 호출하여 결과값을 불러올 수 있음.
-> 단, 이렇게 하면 App.js 내의 함수가 추가된 것이기 때문에 이전 값으로 되돌려주도록 함

5. 페이지 내에서 F12 -> console 하면 Warning이 똭! 어머...
-> 원소들이 "key" prop을 가지고 있지 않다고 뜸.
-> foodILike 배열 원소에 id라는 값을 추가하여 경고 메시지를 해결해보자
-> const foodILike = [ {} ] 내, name: image: 서술 위에 id: 1, 2 등 기재
=> 리액트로는 Food 컴포넌트가 서로 다르다는 것을 알 방법이 없기 때문에 추가하였음

6. 이후 console -> 경고창이 뜸?
-> img 엘리먼트 관련한 설명이 없다는 alt 속성 comment가 보임
-> <img src={picture} 옆에 alt={name} /> 로 적어서, alt 속성의 값으로 {name}을 대입하도록 지정하여 해결봤음!

7. npm install prop-types
-> 컴포넌트가 전달받은 props가 의도한 값인지 확인하기 위함
-> prop-types를 통해 미리 특정 컴포넌트에 전달받아야 하는 한정 값을 정의할 수 있음
 (반드시 와야하는 값이 아닌 다른 값이 전달될 경우 오류메시지를 출력해줌)

8. Food.propTypes = {
  name: PropTypes.string.isRequired,
  picture: PropTypes.string.isRequired,
  rating: PropTypes.number.isRequired,
};
(rating은 숫자이기 때문에 string -> number로 수정해 주었음)
-> console 창 실행 시 출력되었던 오류가 깨끗하게 사라짐!

9. .isRequired가 필수인 내용은 아님. 예를 들어 rating에 isRequired가 붙어있으면, 평점이 매겨지지 않은 값에 대해서 오류가 생길 수 있음 -> 필요할 때 추가하면 된다는 말

10. prop-types의 활용 방법은 다양한데, oneOf(["배열", "지정값"])도 가능하고 oneOfType([PropTypes.string, PropTypes.number]) 처럼 자료형을 다수 지정할 수도 있음.
(추가로 설명되어 있는 이론 자료들을 보면서 실제로 익혀봐야 할듯)